name: Run Pytest with Coverage

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - 'main' # run code coverage only for main, release and dev
      - 'release/**/*'
      - 'dev/**/*'
  workflow_call:


jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: 123456
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Set environment just like the .env file
      APP_NAME: haper
      JWT_SECRET: haper-jwt-secret-ci-test
      JWT_COOKIE_NAME: x-haper-auth
      LOG_LEVEL: DEBUG
      POSTGRES_DSN: "" # doesn't have to set up this env as it will be replaced during pytest fixture code

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests with coverage
      - name: Run Pytest with Coverage
        timeout-minutes: 5 # Timeout in 5 minutes for tests
        run: |
          # Wait until PostgreSQL is ready
          until pg_isready -h localhost -p 5432 -U user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          
          # Run pytest and generate coverage report
          pytest --cov=./biz --cov=app --cov-report=xml

      # Step 5: Upload Coverage to Codecov
      - name: Upload coverage reports to Codecov
        # if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Haper-AI/haper-server